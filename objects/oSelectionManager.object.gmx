<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(global.selection_manager) &amp;&amp; global.selection_manager != 0) { // != 0 is a hack
    show_error("Multiple Selection Managers detected! " +
        "old: " + string(global.selection_manager) + ", new: " + string(id),
        global.WARNING);
}
global.selection_manager = id;

selection = ds_list_create();
ctrlgrp[1] = ds_list_create();
ctrlgrp[2] = ds_list_create();
ctrlgrp[3] = ds_list_create();
ctrlgrp[4] = ds_list_create();
ctrlgrp[5] = ds_list_create();
ctrlgrp[6] = ds_list_create();
ctrlgrp[7] = ds_list_create();
ctrlgrp[8] = ds_list_create();
ctrlgrp[9] = ds_list_create();
ctrlgrp[0] = ds_list_create();

click_x = 0;
click_y = 0;
click_down = false;
click_double = false;

current_command = NO_COMMAND;

formation = FORMATION_LINE;
unit_separation = 72;
separation_angle = 90; // 115, 45
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(selection);
var i;
for(i = 0; i &lt; 10; i+=1)
{
    ds_list_destroy(ctrlgrp[i]);
}

global.selection_manager = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>click_double = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// Global left pressed
if (mouse_check_button_pressed(mb_left)) {
    
    if (instance_exists(global.ui_controller) &amp;&amp; global.ui_controller.ui_click) {
        exit;
    }

    // Left press on oselectableships
    var click_id = collision_point(mouse_x, mouse_y, oselectableships, true, false)
    if (click_id != noone &amp;&amp; !click_id.unselectable) {
        with (click_id) {
            focus = true;
        }
    }
    
    if (current_command == NO_COMMAND) {
        click_x = mouse_x;
        click_y = mouse_y;
        click_down = true;
    } else if (current_command == LAUNCH_FIGHTERS) {
        if (!ds_list_empty(selection))
        {
            ackSound();
            var targetId = collision_point(mouse_x, mouse_y, oselectableships, false, false);
            for (var i = 0; i &lt; ds_list_size(selection); i++)
            {
                commandFighters(ds_list_find_value(selection, i), mouse_x, mouse_y, targetId);
            }
        }
        current_command = NO_COMMAND;
    } else if (current_command == LAUNCH_TRANSPORTS) {
        if (!ds_list_empty(selection))
        {
            var targetId = collision_point(mouse_x, mouse_y, oselectableships, false, false);
            var closest_available_id = noone;
            var closest_available_distance = 9999;
            var closest_cooldown_id = noone;
            var closest_cooldown_distance = 9999;
            
            // Search for closest with transport available and off cooldown
            for (var i = 0; i &lt; ds_list_size(selection); i++)
            {
                with (selection[| i]) {
                    var dist = distance_to_point(mouse_x, mouse_y);
                    if (race == "unsc") {
                        if (pelican - ds_list_size(transport_targetid_queue) &gt; 0) {
                            if (pelican_deploy_cd &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                                closest_available_id = id;
                                closest_available_distance = dist;
                            } else if (pelican_deploy_cd &gt; 0 &amp;&amp; dist &lt; closest_cooldown_distance) {
                                closest_cooldown_id = id;
                                closest_cooldown_distance = dist;
                            }
                        }
                    } else if (race == "cove") {
                        if (phantom - ds_list_size(transport_targetid_queue) &gt; 0) {
                            if (phantom_deploy_cd &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                                closest_available_id = id;
                                closest_available_distance = dist;
                            } else if (phantom_deploy_cd &gt; 0 &amp;&amp; dist &lt; closest_cooldown_distance) {
                                closest_cooldown_id = id;
                                closest_cooldown_distance = dist;
                            }
                        }
                    }
                }
            }
            if (instance_exists(closest_available_id)) {
                ackSound();
                commandTransports(closest_available_id, mouse_x, mouse_y, targetId);
            } else if (instance_exists(closest_cooldown_id)) {
                ackSound();
                commandTransports(closest_cooldown_id, mouse_x, mouse_y, targetId);
            }
        }
        current_command = NO_COMMAND;
    } else if (current_command == FIRE_PRIMARY) {
        if (!ds_list_empty(selection))
        {
            var closest_available_id = noone;
            var closest_available_distance = 9999;
            
            // Search for closest with primary weapon available and off cooldown
            for (var i = 0; i &lt; ds_list_size(selection); i++)
            {
                with (selection[| i]) {
                    var dist = point_distance(x, y, mouse_x, mouse_y);
                    if (race == "unsc") {
                        if (mac_cooldown &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                            closest_available_id = id;
                            closest_available_distance = dist;
                        }
                    } else if (race == "cove") {
                        if (energyprojector_cooldown &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                            closest_available_id = id;
                            closest_available_distance = dist;
                        }
                    }
                }
            }
            if (instance_exists(closest_available_id)) {
                firePrimary(closest_available_id, mouse_x, mouse_y);
            }
        }
        current_command = NO_COMMAND;
    }
}

// Global left released
if (mouse_check_button_released(mb_left)) {
    
    if (current_command != NO_COMMAND) {
        exit;
    }
    
    // Left release on oselectableships
    var click_id = collision_point(mouse_x, mouse_y, oselectableships, true, false)
    if (click_id != noone &amp;&amp; !click_id.unselectable) {
        with (click_id) {
            if (focus) {            
                //click and release on a unit 
                // tried to consider WC3 http://classic.battle.net/war3/basics/specialcommands.shtml
                var shiftdown, ctrldown;
                shiftdown = keyboard_check_direct(vk_lshift);
                ctrldown = keyboard_check_direct(vk_lcontrol);
                
                if (global.playerside == side){
                    reportSound();
                }
                
                if (shiftdown &amp;&amp; ctrldown) { //add all units of same type on screen to group
                    with(object_index) {
                        if (!selected &amp;&amp; collision_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], id, false, false)) {
                            if (global.playerside == side) {
                                addSelection(id);
                            }
                        }
                    }
                }
                else if (shiftdown) {      //adds unit to group if unselected, else removes
                    if (global.playerside == side) {
                        if (selected) {
                            removeSelection(id);
                        } else {
                            addSelection(id);
                        }
                    }
                }
                else if (ctrldown) {     //selects all units of same type on screen
                    clearSelection();
                    with(object_index) {
                        if (!selected &amp;&amp; collision_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], id, false, false)) {
                            if (global.playerside == side) {
                                addSelection(id);
                            }
                        }
                    }
                } else {
                    if (mouse_x == global.selection_manager.click_x &amp;&amp; mouse_y == global.selection_manager.click_y) {
                        clearSelection();
                        if (global.selection_manager.click_double) { //double click
                            with(object_index) {
                                if (!selected &amp;&amp; collision_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], id, false, false)) {
                                    if (global.playerside == side) {
                                        addSelection(id);
                                    }
                                }
                            }
                        } else {   //single click
                            if (global.playerside == side) {
                                addSelection(id);
                            }
                        }
                    }
                }
            }
        }
    }
    with (oselectableships) {
        focus = false;
    }
    
    // Select units in box released
    // TODO check abs(click_x - mouse_x) to prevent small boxes
    if (click_down &amp;&amp; click_x != mouse_x &amp;&amp; click_y != mouse_y) //dragging a box
    {
        if(!keyboard_check_direct(vk_lshift))
        {
            clearSelection();
        }
        
        var selectedSomething = false;
        with(oselectableships)
        {
            if (collision_rectangle(global.selection_manager.click_x, global.selection_manager.click_y, mouse_x, mouse_y, id, false, false))
            {
                if (global.playerside == side &amp;&amp; !id.unselectable)
                {
                    addSelection(id);
                    selectedSomething = true;
                }
            }
        }
        
        if (selectedSomething)
        {
            reportSound();
        }
    }
    
    click_down = false;
    click_double = true;
    alarm[0] = room_speed/2; //half a second
}

// Global right pressed
if (mouse_check_button_pressed(mb_right)) {
    if (current_command != NO_COMMAND) {
        current_command = NO_COMMAND;
    } else {
        if (!ds_list_empty(selection)) {
            ackSound();
            var targetId = collision_point(mouse_x, mouse_y, oselectableships, false, false);
            if (targetId != noone) {
                if (targetId.side != global.playerside) {
                    for (var i = 0; i &lt; ds_list_size(selection); i++) {
                        attackTarget(ds_list_find_value(selection, i), targetId);
                    }
                } else {
                    formationMove(selection, mouse_x, mouse_y);
                }
            } else {
                formationMove(selection, mouse_x, mouse_y);
            }
        }
    }
}
    
// Modify cursor sprite to match current command
switch (current_command) {
    case NO_COMMAND:
        cursor_sprite = smouse;
        break;
    case LAUNCH_FIGHTERS:
        cursor_sprite = sUNSC_longsword;
        break;
    case LAUNCH_TRANSPORTS:
        cursor_sprite = sUNSC_pelican;
        break;
    case FIRE_PRIMARY:
        cursor_sprite = smouseglow;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!ds_list_empty(selection) &amp;&amp; global.debug)
{
    // draw speed
    var selectedUnit = ds_list_find_value(selection, 0);
    draw_set_color(c_yellow);
    draw_text(view_xview[PRIMARY_VIEW]+60, view_yview[PRIMARY_VIEW]+30, string(selectedUnit.movespeed));
    
    // draw selection ids
    for (var i = 0; i &lt; ds_list_size(selection); i++) {
        if (instance_exists(selection[| i])) {
            draw_set_color(c_green);
        } else {
            draw_set_color(c_red);
        }
        draw_text(view_xview[PRIMARY_VIEW]+view_wview[PRIMARY_VIEW]/2, view_yview[PRIMARY_VIEW] + 45 * i+1, string(selection[| i]));
    }
}

    
// draw targeting line
if (current_command == FIRE_PRIMARY) {
    if (!ds_list_empty(selection))
    {
        var closest_available_id = noone;
        var closest_available_distance = 9999;
        
        // Search for closest with primary weapon available and off cooldown
        for (var i = 0; i &lt; ds_list_size(selection); i++)
        {
            with (selection[| i]) {
                var dist = point_distance(x, y, mouse_x, mouse_y);
                if (race == "unsc") {
                    if (mac_cooldown &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                        closest_available_id = id;
                        closest_available_distance = dist;
                    }
                } else if (race == "cove") {
                    if (energyprojector_cooldown &lt;= 0 &amp;&amp; dist &lt; closest_available_distance) {
                        closest_available_id = id;
                        closest_available_distance = dist;
                    }
                }
            }
        }
        //show_debug_message(string(closest_available_id));
        if (instance_exists(closest_available_id)) {
            draw_set_color(c_red);
            var range = 0;
            var dir = point_direction(closest_available_id.x, closest_available_id.y, mouse_x, mouse_y);
            if (closest_available_id.race = "unsc") {
                range = closest_available_id.mac_range;
            } else if (closest_available_id.race = "cove") {
                range = closest_available_id.energyprojector_range;
            }
            range += closest_available_id.primary_origin_distance_offset;
            //show_debug_message("range: " + string(range) + ", dir: " + string(dir));
            draw_line_width(closest_available_id.x,closest_available_id.y,closest_available_id.x+lengthdir_x(range,dir),closest_available_id.y+lengthdir_y(range,dir),2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var oldColor = draw_get_color();
var oldAlpha = draw_get_alpha();

if (click_down) 
{
    draw_set_alpha(0.25);
    draw_set_color(c_green);
    draw_rectangle(click_x, click_y, mouse_x, mouse_y, false);

    draw_set_alpha(1);
    draw_set_color(c_lime);
    draw_rectangle(click_x, click_y, mouse_x, mouse_y, true);
}

draw_set_color(oldColor);
draw_set_alpha(oldAlpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; ds_list_size(selection); i++)
{
    with (selection[| i]) {
        if (race == "unsc") {
            mac_cooldown = 0;
            hull = hull_max;
            shield = shield_max;
        } else if (race == "cove") {
            energyprojector_cooldown = 0;
            hull = hull_max;
            shield = shield_max;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!ds_list_empty(selection))
{
    for (var i = 0; i &lt; ds_list_size(selection); i++)
    {
        stop(ds_list_find_value(selection, i));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(9);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlGroupKey(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (++formation == FORMATION_MAX)
{
    formation = FORMATION_LINE;
}
switch(formation) {
    case FORMATION_LINE:
        separation_angle = 90;
        break;
    case FORMATION_ARROWHEAD:
        separation_angle = 115;
        break;
    case FORMATION_TRIDENT:
        separation_angle = 45;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
