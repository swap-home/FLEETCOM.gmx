<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oallships</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

singleship_damage = 1;
singleship_rate = 1;
singleship_speed = 1;
singleship_range = 1;

exp_value = 1;

child_trail_color = c_white;

sight_range = 300; //range to detect targets and begin interception/attack/escort
escort_leash_range = 500; //range to return to initial point
intercept_leash_range = 400; 


refuel_range = 9001;

findtarget_delay = 15;

damage_dealt = 0;

var ID = id;

trail = instance_create(x,y,oribbontrail);
with(trail) {
    parent = ID;
    depth = ID.depth;
    trail_color = ID.child_trail_color;
}

parentid = 0;

state = MOVING;

targetid = noone;
escortid = noone;
target_x = 0;
target_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check nearby targets and switch targets if necessary

var selfid_l;
selfid_l = id;

switch(state) {
    case MOVING:
    case ATTACK:
    case BOARDING:
    case REFUEL:
        //no need to change targets in these states
        break;
    case ESCORT:
    case INTERCEPT:
        //range to engage enemy units
        var closest_l = sight_range;
        var closestid_l = noone;
        
        //Find nearest singleship within range
        with (oallsingleships)
        {
            if (side != selfid_l.side &amp;&amp; side != NEUTRAL &amp;&amp; !invulnerable &amp;&amp; !invisible)
            {
                if (distance_to_object(selfid_l) &lt; closest_l)
                {
                    closest_l = distance_to_object(selfid_l);
                    closestid_l = id;
                }
            }
        }
        
        //Find nearest capital ships if no target already
        if (!instance_exists(closestid_l))
        {
            with (oallcapitalships)
            {
                if (side != selfid_l.side &amp;&amp; side != NEUTRAL &amp;&amp; !invulnerable &amp;&amp; !invisible)
                {
                    if (distance_to_object(selfid_l) &lt; closest_l)
                    {
                        closest_l = distance_to_object(selfid_l);
                        closestid_l = id;
                    }
                }
            }
        }
        targetid = closestid_l;
        break;
}
/*
//Find nearest allied capital ship if no target
if (!instance_exists(closestid_l))
{
    if (instance_exists(parentid)) {closestid_l = parentid;} 
    else 
    {
        with (oallcapitalships)
        {
            if (side == selfid_l.side)
            {
                closest_l = selfid_l.refuel_range;
                if (distance_to_object(selfid_l) &lt; closest_l)
                {
                    closest_l = distance_to_object(selfid_l);
                    closestid_l = id;
                }
            }
        }
    }
}
*/

alarm[0] = findtarget_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init) {
    singleShipInitialize();
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Switch states

switch(state) {
    case MOVING: 
        // Move to target capital/area for escort, attack / interception, ignoring everything
        // Change to escort or attack when close enough to target
        // return to escort parent if original target is down
        // intercept current position if parent is also gone
        
        if (targetid == noone) { // MOVING to INTERCEPT
            if (distance_to_point(target_x, target_y) &lt;= sight_range) { 
                state = INTERCEPT;
            }
        } else if (!instance_exists(targetid)) { // TARGET MISSING
            if (instance_exists(parentid)) {
                escort(parentid);
            } else {
                intercept(x,y);
            }
        } else { // MOVING to ESCORT / ATTACK
            if (targetid.side == side || targetid.side == NEUTRAL || targetid.invulnerable) {
                if (distance_to_object(targetid) &lt;= sight_range) {
                    state = ESCORT;
                }
            } else {
                if (distance_to_object(targetid) &lt;= sight_range) {
                    state = ATTACK;
                }
            }
        }
        if (instance_exists(targetid)) {
            homing_obj(targetid);
        } else {
            homing_point(target_x, target_y);
        }
        break;
        
    case ATTACK:
        // attack a capital ship in range, ignore singleships
        if (!instance_exists(targetid)) {
            if (instance_exists(parentid)) {
                escort(parentid);
            } else {
                intercept(x,y);
            }
        } else {
            homing_obj(targetid);
        }
        break;

    case INTERCEPT:
        // intercept any enemy ship within range of area
        if (distance_to_point(target_x, target_y) &gt; intercept_leash_range) {
            intercept(target_x, target_y);
        } else if (!instance_exists(targetid)) {
            homing_point(target_x, target_y);
        } else {
            homing_obj(targetid);
        }
        break;
        
    case ESCORT:
        // move to allied capital ship, and intercept enemy ships near that
        // return to escort parent if original escort is down
        // intercept current position if parent is also gone
        if (distance_to_object(escortid) &gt; escort_leash_range) {
            escort(escortid);
        } else if (!instance_exists(targetid)) {
            if (instance_exists(escortid)) {
                homing_obj(escortid);
            } else {
                if (instance_exists(parentid)) {
                    escort(parentid);
                } else {
                    intercept(x,y);
                }
            }
        } else {
            homing_obj(targetid);
        }
        break;

    case BOARDING:
        // board a capital ship in range, ignore singleships
        if (!instance_exists(targetid)) {
            if (instance_exists(parentid)) {
                refuel(parentid);
            } else {
                intercept(x,y);
            }
        } else {
            homing_obj(targetid);
        }
        break;
        
    case REFUEL:
        // return to parentship, restocking singleship
        if (instance_exists(parentid)) {
            targetid = parentid;
            homing_obj(targetid);
        } else {
            intercept(x,y); // Temp solution, patrol current area
            // TODO: Find nearest ally ship to refuel in
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// adjust movespeed to be slower than singleship target if about to overtake them 

movespeed = maxspeed;
if (instance_exists(targetid)) {
    if (object_is_ancestor(targetid.object_index, oallsingleships)) {
        if (movespeed &gt; targetid.movespeed) {
            if (distance_to_object(targetid) &lt; (movespeed - targetid.movespeed)) {
                movespeed = targetid.movespeed;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="odestructableweaponry">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.affects == oallsingleships &amp;&amp; side != other.side &amp;&amp; !invulnerable)
{
    Damage_Unit(other.dmg_kinetic, other.id, id, "kinetic");
    Damage_Unit(other.dmg_explosive, other.id, id, "explosive");
    Damage_Unit(other.dmg_thermal, other.id, id, "thermal");
    with (other) {
        if (explode_on_impact &amp;&amp; !exploded) {
            splashDamage(explosive_affects, id);
            exploded = true;
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oprojectileweaponry">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.affects == oallsingleships &amp;&amp; side != other.side &amp;&amp; !invulnerable)
{
    Damage_Unit(other.dmg_kinetic, other.id, id, "kinetic");
    Damage_Unit(other.dmg_explosive, other.id, id, "explosive");
    Damage_Unit(other.dmg_thermal, other.id, id, "thermal");
    with (other) {
        if (explode_on_impact &amp;&amp; !exploded) {
            splashDamage(explosive_affects, id);
            exploded = true;
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
