<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(global.ui_controller)) {
    show_error("Multiple UI Controllers detected!", global.WARNING);
}
global.ui_controller = id;

display_scale = display_get_gui_width() / view_wview[PRIMARY_VIEW];

SCREEN_NAME_BASE = "screenshot_";
SCREEN_EXT = ".png";
screennum = 0;

while (true) {
    if (!file_exists(SCREEN_NAME_BASE + string(screennum) + SCREEN_EXT)) {
        break;
    }
    screennum++;
}

border = 32; // from edge of display
minimap_width = 128;
minimap_height = 64;
minimap_square_size = 2;
padding = 32; // between elements
text_padding = 6; // between elements and their captions
button_size = 64;
button_sprites = ds_list_create();
button_actions = ds_list_create();
button_keys = ds_list_create();
button_mouseover = -1; // -1 means no mouse is not over any button
ui_click = false;
objective_text_padding = 32;
objective_string = "";

ui_rotation_clock = 0;
ui_rotation_clock_max = 100;
ui_size_clock = 0;
ui_size_clock_max = 100;

ds_list_add(button_keys, ord("Q"));
ds_list_add(button_keys, ord("W"));
ds_list_add(button_keys, ord("E"));
ds_list_add(button_keys, ord("R"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(button_sprites);
ds_list_destroy(button_actions);
ds_list_destroy(button_keys);

global.ui_controller = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui_click = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check if buttons should be pressed
if (global.selection_manager != 0) {
    for (var i = 0; i &lt; ds_list_size(button_actions); i++) {
    
        // Check for keys pressed
        if (keyboard_check_pressed(button_keys[| i])) {
            if (global.selection_manager.current_command == button_actions[| i]) {
                global.selection_manager.current_command = NO_COMMAND;
            } else {
                global.selection_manager.current_command = button_actions[| i];
            }
        }
        
        // Check if buttons pressed by mouse
        if (mouse_check_button_pressed(mb_left) 
            &amp;&amp; mouse_x &gt;= view_xview[PRIMARY_VIEW] + border + minimap_width + (padding * (i+1)) + (button_size * i)
            &amp;&amp; mouse_x &lt;= view_xview[PRIMARY_VIEW] + border + minimap_width + (padding * (i+1)) + (button_size * (i+1))
            &amp;&amp; mouse_y &gt;= view_yview[PRIMARY_VIEW] + view_hview[PRIMARY_VIEW] - border - minimap_height
            &amp;&amp; mouse_y &lt;= view_yview[PRIMARY_VIEW] + view_hview[PRIMARY_VIEW] - border - minimap_height + button_size) {
            
            ui_click = true;
            if (global.selection_manager.current_command == button_actions[| i]) {
                global.selection_manager.current_command = NO_COMMAND;
            } else {
                global.selection_manager.current_command = button_actions[| i];
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Populate UI buttons depending on current selected ships
ds_list_clear(button_sprites);
ds_list_clear(button_actions);

if (instance_exists(global.selection_manager)) {
    var selection = global.selection_manager.selection;
    if (!ds_list_empty(selection)) {
        if (groupHasFighters(selection)) {
            ds_list_add(button_sprites, sFighters);
            ds_list_add(button_actions, LAUNCH_FIGHTERS);
        }
        
        if (groupHasTransports(selection)) {
            ds_list_add(button_sprites, sTransports);
            ds_list_add(button_actions, LAUNCH_TRANSPORTS);
        }
        
        if (groupHasPrimaryFire(selection)) {
            ds_list_add(button_sprites, sPrimaryFire);
            ds_list_add(button_actions, FIRE_PRIMARY);
        }
        
    }
}

// Update animation timers
ui_rotation_clock++;
if (ui_rotation_clock == ui_rotation_clock_max) {
    ui_rotation_clock = 0;
}

ui_size_clock++;
if (ui_size_clock == ui_size_clock_max) {
    ui_size_clock = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var button_count = ds_list_size(button_actions);
var draw_x = 0 + border;
var draw_y = view_hview[PRIMARY_VIEW] - border - minimap_height;

var minimap_wscale = minimap_width / room_width;
var minimap_hscale = minimap_height / room_height;
var minimap_square_length = minimap_square_size;

draw_set_alpha(GUI_ALPHA);

// draw minimap
draw_set_color(c_gray);
draw_ellipse(draw_x * display_scale, 
    draw_y * display_scale, 
    (draw_x + minimap_width) * display_scale, 
    (draw_y + minimap_height) * display_scale, 
    false);

// draw minimap screen
draw_set_color(c_white);
draw_rectangle((draw_x + view_xview[PRIMARY_VIEW] * minimap_wscale) * display_scale, 
    (draw_y + view_yview[PRIMARY_VIEW] * minimap_hscale) * display_scale,
    (draw_x + (view_wview[PRIMARY_VIEW] + view_xview[PRIMARY_VIEW]) * minimap_wscale) * display_scale,
    (draw_y + (view_hview[PRIMARY_VIEW] + view_yview[PRIMARY_VIEW]) * minimap_hscale) * display_scale,
    true);
    
// TODO: move this computation out of draw step, decouple minimap state from game state
with (oallcapitalships) {
    if (side == global.playerside) {draw_set_color(c_yellow);}
    else if (side == NEUTRAL) {draw_set_color(c_white);}
    else {draw_set_color(c_red);}
    
    draw_rectangle((draw_x + x * minimap_wscale) * global.ui_controller.display_scale - minimap_square_length/2, 
    (draw_y + y * minimap_hscale) * global.ui_controller.display_scale - minimap_square_length/2,
    (draw_x + x * minimap_wscale) * global.ui_controller.display_scale + minimap_square_length/2,
    (draw_y + y * minimap_hscale) * global.ui_controller.display_scale + minimap_square_length/2,
    false);
     
}

draw_x += minimap_width;

// draw UI buttons
draw_set_color(c_gray);
for (var i = 0; i &lt; button_count; i++) {
    draw_x += padding;
    draw_rectangle(draw_x * display_scale, 
        draw_y * display_scale,
        (draw_x + button_size) * display_scale,
        (draw_y + button_size) * display_scale,
        false);
    
    // draw border
    /*
    if (i == 0) {
        draw_set_color(c_red);
        draw_line(border + minimap_width + (padding * (i+1)) + (button_size * i), view_hview[PRIMARY_VIEW] - border - minimap_height, border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), view_hview[PRIMARY_VIEW] - border - minimap_height);
        draw_line(border + minimap_width + (padding * (i+1)) + (button_size * i), view_hview[PRIMARY_VIEW] - border - minimap_height + button_size, border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), view_hview[PRIMARY_VIEW] - border - minimap_height + button_size);
        draw_set_color(c_gray);
    }*/
    
    if (!sprite_exists(button_sprites[| i])) {
        show_error("sprite does not exist for " + string(button_sprites[| i]) + " on " + string(i) + "th position of ui buttons", true);
    }
    
    draw_sprite(button_sprites[| i], 0, draw_x * display_scale, draw_y * display_scale);
    
    draw_set_font(Halo);
    draw_set_halign(fa_center);
    draw_text((draw_x + button_size/2) * display_scale, (draw_y + button_size + text_padding) * display_scale, string(chr(button_keys[| i])));
    draw_x += button_size;
}


// draw current objectives
if (objective_string != "") {
    draw_set_color(c_gray);
    draw_set_font(Halo);
    draw_set_halign(fa_center);
    draw_text_ext(view_wview[PRIMARY_VIEW]/2, objective_text_padding, "Current Objective: #" + objective_string, -1, view_wview[PRIMARY_VIEW]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save(SCREEN_NAME_BASE + string(screennum) + SCREEN_EXT);
screennum++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(FarthestOutpost);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.debug = !global.debug;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
