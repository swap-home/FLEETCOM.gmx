<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Controller for drawing buttons and UI

if (instance_exists(global.ui_controller)) {
    show_error("Multiple UI Controllers detected!", global.WARNING);
}
global.ui_controller = id;

display_scale = display_get_gui_width() / view_wview[PRIMARY_VIEW];

SCREEN_NAME_BASE = "screenshot_";
SCREEN_EXT = ".png";
screennum = 0;

while (true) {
    if (!file_exists(SCREEN_NAME_BASE + string(screennum) + SCREEN_EXT)) {
        break;
    }
    screennum++;
}

text_show_count = 0;
text_speed = 1;
text_string = "";
text_fade_begin = 100;
text_fade_end = 120;
text_fade_counter = 0;
text_sep = 32;

textbox_alpha = 0.90;
textbox_width = 800;
textbox_height = 400;
textbox_padding = 16;
textbox_text_alpha = 1;

border = 32; // from edge of display
minimap_width = 128;
minimap_height = 64;
minimap_square_size = 2;
padding = 32; // between elements
text_padding = 6; // between elements and their captions
button_size = 64;
button_sprites = ds_list_create();
button_actions = ds_list_create();
button_keys = ds_list_create();
button_mouseover = -1; // -1 means no mouse is not over any button
button_required = -1; // During the tutorial, sometimes other options are all disabled
button_border_width = 4;

button_tooltip_alpha = 0.95;
button_tooltip_width = 350;
button_tooltip_height = 200;
button_tooltip_text_height = 24;
button_tooltip_text_xscale = 0.75;
button_tooltip_text_yscale = 0.75;
button_tooltip_padding = 10;
button_tooltip_distance_from_button = 8;


infotext_padding = 20;
infotext_xscale = 0.75;
infotext_yscale = 0.75;
infotext_module_icon_size = 32;
infotext_module_icon_padding = 8;
infotext_module_icon_size_ratio = infotext_module_icon_size/64;

ui_click = false;
objective_string = "";


ui_rotation_clock = 0;
ui_rotation_clock_max = 100;
ui_size_clock = 0;
ui_size_clock_max = 45;

ds_list_add(button_keys, ord("Q"));
ds_list_add(button_keys, ord("W"));
ds_list_add(button_keys, ord("E"));
ds_list_add(button_keys, ord("R"));
ds_list_add(button_keys, ord("T"));
ds_list_add(button_keys, ord("Y"));
ds_list_add(button_keys, ord("U"));
ds_list_add(button_keys, ord("I"));
ds_list_add(button_keys, ord("O"));
ds_list_add(button_keys, ord("P"));

shiptype_strings = ds_map_create();
shiptype_strings[? oUNSC_corvette_fast] = "Scout Corvette";
shiptype_strings[? oUNSC_corvette_repair] = "Support Corvette";
shiptype_strings[? oUNSC_frigate_charonL] = "Charon-class Light Frigate";
shiptype_strings[? oUNSC_frigate_parisH] = "Paris-class Heavy Frigate";
shiptype_strings[? oUNSC_destroyer_diligence] = "Diligence-class Destroyer";
shiptype_strings[? oUNSC_destroyer_halberd] = "Halberd-class Destroyer";
shiptype_strings[? oUNSC_cruiser_marathonH] = "Marathon-class Heavy Cruiser";

action_tooltip_strings = ds_map_create();
action_tooltip_strings[? LAUNCH_FIGHTERS] = "LAUNCH FIGHTERS#Launches the ship's fighter complement##Self: return to hangars#Ally: escort ship#Enemy: attack ignoring enemy fighters#No target: intercept area";
action_tooltip_strings[? LAUNCH_TRANSPORTS] = "LAUNCH PELICANS#Order transports to board a target##Ally: reinforce#Enemy: board ship";
action_tooltip_strings[? FIRE_PRIMARY] = "MAC#Fire the Magnetic Accelerator Cannon in a direction, dealing massive damage to the first target hit##Ally ships block the shot but do not take damage";
action_tooltip_strings[? MORAY_MINES] = "MORAY MINES#Deploys a field of anti-fighter mines, which deal area of effect damage##First activation places mines, second activation detonates mines. Mines also detonate on proximity";
action_tooltip_strings[? SHIVA_TACNUKE] = "SHIVA TACNUKE#Launches a slow tactical nuke, which deals damage in a large area of effect##Detonates upon contact with an enemy or upon reaching its destination";

// only available with oGameMenucontroller

if (instance_exists(oGameMenucontroller)) {
    var ctrlid = instance_find(oGameMenucontroller, 0);
    
    // Ships
    action_tooltip_strings[? CORVETTE_FAST] = "SCOUT CORVETTE#Fast attack light capital ship, excellent at scouting enemy positions##cR: "+string(ctrlid.creditCost[? CORVETTE_FAST])+"#Fleet strength: "+string(ctrlid.fleetStrength[? CORVETTE_FAST]);
    action_tooltip_strings[? CORVETTE_REPAIR] = "LOGISTICS CORVETTE#Support light capital ship, capable of performing emergency repairs##cR: "+string(ctrlid.creditCost[? CORVETTE_REPAIR])+"#Fleet strength: "+string(ctrlid.fleetStrength[? CORVETTE_REPAIR]);
    action_tooltip_strings[? FRIGATE_CHARON] = "CHARON-CLASS LIGHT FRIGATE#Frigate class with the largest troop complement and number of fighters, suited for troop support##cR: "+string(ctrlid.creditCost[? FRIGATE_CHARON])+"#Fleet strength: "+string(ctrlid.fleetStrength[? FRIGATE_CHARON]);
    action_tooltip_strings[? FRIGATE_PARIS] = "PARIS-CLASS HEAVY FRIGATE#Frigate class with heavy armor and armaments, used to screen formations from fighters and transports##cR: "+string(ctrlid.creditCost[? FRIGATE_PARIS])+"#Fleet strength: "+string(ctrlid.fleetStrength[? FRIGATE_PARIS]);
    action_tooltip_strings[? DESTROYER_DILIGENCE] = "DILIGENCE-CLASS DESTROYER#Destroyer class with a sizable troop complement, allows for the deployment of troops from the frontline##cR: "+string(ctrlid.creditCost[? DESTROYER_DILIGENCE])+"#Fleet strength: "+string(ctrlid.fleetStrength[? DESTROYER_DILIGENCE]);
    action_tooltip_strings[? DESTROYER_HALBERD] = "HALBERD-CLASS DESTROYER#Offensive Destroyer class armed with tactical nukes, heavily armed frontline combatant##cR: "+string(ctrlid.creditCost[? DESTROYER_HALBERD])+"#Fleet strength: "+string(ctrlid.fleetStrength[? DESTROYER_HALBERD]);
    action_tooltip_strings[? CRUISER_MARATHON] = "MARATHON-CLASS HEAVY CRUISER#Heavy Cruiser class excelling in both offense and defense, primarily used as a flagship##cR: "+string(ctrlid.creditCost[? CRUISER_MARATHON])+"#Fleet strength: "+string(ctrlid.fleetStrength[? CRUISER_MARATHON]);
    
    // Modules
    action_tooltip_strings[? UPGRADE_MAC] = "MAGNETIC ACCELERATOR CANNON#Heavy capital ship armament, less effective on Frigates, cannot be built on Corvettes##cR: "+string(ctrlid.creditCost[? UPGRADE_MAC])+"#Fleet strength: "+string(ctrlid.fleetStrength[? UPGRADE_MAC]);   
    action_tooltip_strings[? UPGRADE_HANGAR] = "HARGAR BAYS#Adds additional fighter and transport capacity, cannot be built on Corvettes or Destroyers##cR: "+string(ctrlid.creditCost[? UPGRADE_HANGAR])+"#Fleet strength: "+string(ctrlid.fleetStrength[? UPGRADE_HANGAR]);   
    
    // Mission Control
    action_tooltip_strings[? MISSION_START] = "Start mission, dispatching ships in the yellow deploy zone";
    action_tooltip_strings[? MISSION_RIGHT] = "END OF THE DEMO#Click for battle simulation";
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(button_sprites);
ds_list_destroy(button_actions);
ds_list_destroy(button_keys);
ds_map_destroy(shiptype_strings);
ds_map_destroy(action_tooltip_strings);

global.ui_controller = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui_click = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>button_mouseover = -1;

// Check if buttons should be pressed
if (global.selection_manager != 0) {
    for (var i = 0; i &lt; ds_list_size(button_actions); i++) {
    
        // Check for keys pressed
        if (keyboard_check_pressed(button_keys[| i])) {
            
            // if button is enabled/disabled
            //if (button_required == -1 || button_required == i) {
                
                // toggles command
                if (global.selection_manager.current_command == button_actions[| i]) {
                    global.selection_manager.current_command = NO_COMMAND;
                } else {
                    global.selection_manager.current_command = button_actions[| i];
                }
            //}
        }
        
        // Check if mouse over buttons
        if (window_mouse_get_x() &gt;= border + minimap_width + (padding * (i+1)) + (button_size * i)
            &amp;&amp; window_mouse_get_x() &lt;= border + minimap_width + (padding * (i+1)) + (button_size * (i+1))
            &amp;&amp; window_mouse_get_y() &gt;= SCREEN_HEIGHT - border - minimap_height
            &amp;&amp; window_mouse_get_y() &lt;= SCREEN_HEIGHT - border - minimap_height + button_size) {
            
            button_mouseover = i;
            
            if (mouse_check_button_pressed(mb_left)) {
                ui_click = true;
                
                // if button is enabled/disabled
                //if (button_required == -1 || button_required == i) {
                
                    // toggles command
                    if (global.selection_manager.current_command == button_actions[| i]) {
                        global.selection_manager.current_command = NO_COMMAND;
                    } else {
                        global.selection_manager.current_command = button_actions[| i];
                    }
                //}
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (text_string != "" &amp;&amp; text_show_count &lt; string_length(text_string)) {
    if (mouse_check_button(mb_left)) {
        text_show_count += text_speed * 5;
    }
    text_show_count += text_speed;
    
    if (text_show_count &gt; string_length(text_string)) {
        text_show_count = string_length(text_string);
    }
} else if (text_show_count == string_length(text_string)) {
    if (mouse_check_button(mb_left)) {
        text_fade_counter += 2;
    }
    text_fade_counter++;
    if (text_fade_counter &gt;= text_fade_begin) {
        textbox_text_alpha = (text_fade_end - text_fade_counter)/(text_fade_end - text_fade_begin);
    }
    if (text_fade_counter &gt;= text_fade_end) {
        text_string = "";
    }
}

// Populate UI buttons depending on current selected ships
ds_list_clear(button_sprites);
ds_list_clear(button_actions);

if (instance_exists(global.selection_manager)) {
    var selection = global.selection_manager.selection;
    if (!ds_list_empty(selection)) {
    
        // Hack for Refit Station
        if (ds_list_size(selection) == 1 &amp;&amp; 
            selection[| 0].object_index == oRefitStation) {
            
            ds_list_add(button_sprites, sPrimaryFire);
            ds_list_add(button_actions, UPGRADE_MAC);
            
            // Disabled in tutorial
            if (!instance_exists(oTutorialHelper)) {
                ds_list_add(button_sprites, sHangar);
                ds_list_add(button_actions, UPGRADE_HANGAR);
            }
        }
        
        // Hack for Shipyard
        if (ds_list_size(selection) == 1 &amp;&amp;
            selection[| 0].object_index == oShipyard) {
            
            // Disabled in tutorial until step 10
            if (!instance_exists(oTutorialHelper) || instance_find(oTutorialHelper, 0).tutorial_step &gt;= 10) {
                ds_list_add(button_sprites, sBuildCorvetteFast);
                ds_list_add(button_actions, CORVETTE_FAST);
                
                ds_list_add(button_sprites, sBuildCorvetteRepair);
                ds_list_add(button_actions, CORVETTE_REPAIR);
            }
                        
            // Disabled in tutorial
            if (!instance_exists(oTutorialHelper)) {
                ds_list_add(button_sprites, sBuildFrigateCharon);
                ds_list_add(button_actions, FRIGATE_CHARON);
                
                ds_list_add(button_sprites, sBuildFrigateParis);
                ds_list_add(button_actions, FRIGATE_PARIS);
                
                ds_list_add(button_sprites, sBuildDestroyerDiligence);
                ds_list_add(button_actions, DESTROYER_DILIGENCE);
                
                ds_list_add(button_sprites, sBuildDestroyerHalberd);
                ds_list_add(button_actions, DESTROYER_HALBERD);
                
                ds_list_add(button_sprites, sBuildCruiserMarathon);
                ds_list_add(button_actions, CRUISER_MARATHON);
            }
        }
        
        // Hack for Mission Control
        if (ds_list_size(selection) == 1 &amp;&amp; 
            selection[| 0].object_index == oMissionControl) {
            
            //ds_list_add(button_sprites, sUNSCicon);
            //ds_list_add(button_actions, MISSION_START);
            
            ds_list_add(button_sprites, sUNSCicon);
            ds_list_add(button_actions, MISSION_RIGHT);
        }
         
        // Regular abilities   
        if (groupHasFighters(selection)) {
            ds_list_add(button_sprites, sFighters);
            ds_list_add(button_actions, LAUNCH_FIGHTERS);
        }
        
        if (groupHasTransports(selection)) {
            ds_list_add(button_sprites, sTransports);
            ds_list_add(button_actions, LAUNCH_TRANSPORTS);
        }
        
        if (groupHasPrimaryFire(selection)) {
            ds_list_add(button_sprites, sPrimaryFire);
            ds_list_add(button_actions, FIRE_PRIMARY);
        }
        
    }
}

// Update animation timers
ui_rotation_clock++;
if (ui_rotation_clock == ui_rotation_clock_max) {
    ui_rotation_clock = 0;
}

ui_size_clock++;
if (ui_size_clock == ui_size_clock_max) {
    ui_size_clock = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw UI elements
var button_count = ds_list_size(button_actions);
var draw_x = 0 + border * display_scale;
var draw_y = SCREEN_HEIGHT - (border + minimap_height) * display_scale;

var minimap_wscale = minimap_width / room_width;
var minimap_hscale = minimap_height / room_height;
var minimap_square_length = minimap_square_size;

draw_set_alpha(GUI_ALPHA);

// draw minimap
draw_set_color(c_gray);
draw_ellipse(draw_x, 
    draw_y, 
    draw_x + minimap_width * display_scale, 
    draw_y + minimap_height * display_scale, 
    false);

// draw minimap screen
draw_set_color(c_white);
draw_rectangle((draw_x + view_xview[PRIMARY_VIEW] * minimap_wscale) * display_scale, 
    (draw_y + view_yview[PRIMARY_VIEW] * minimap_hscale) * display_scale,
    (draw_x + (view_wview[PRIMARY_VIEW] + view_xview[PRIMARY_VIEW]) * minimap_wscale) * display_scale,
    (draw_y + (view_hview[PRIMARY_VIEW] + view_yview[PRIMARY_VIEW]) * minimap_hscale) * display_scale,
    true);
    
// TODO: move this computation out of draw step, decouple minimap state from game state
with (oallcapitalships) {
    if (side == global.playerside) {draw_set_color(c_yellow);}
    else if (side == NEUTRAL) {draw_set_color(c_white);}
    else {draw_set_color(c_red);}
    
    draw_rectangle((draw_x + x * minimap_wscale - minimap_square_length/2) * global.ui_controller.display_scale, 
    (draw_y + y * minimap_hscale - minimap_square_length/2) * global.ui_controller.display_scale,
    (draw_x + x * minimap_wscale + minimap_square_length/2) * global.ui_controller.display_scale,
    (draw_y + y * minimap_hscale + minimap_square_length/2) * global.ui_controller.display_scale,
    false);
     
}

draw_x += minimap_width * display_scale;

// draw UI buttons
draw_set_color(c_gray);
for (var i = 0; i &lt; button_count; i++) {
    draw_x += padding * display_scale;
    draw_rectangle(draw_x * display_scale, 
        draw_y * display_scale,
        (draw_x + button_size) * display_scale,
        (draw_y + button_size) * display_scale,
        false);
    
    // draw border
    if (global.selection_manager.current_command == button_actions[| i]) {
        draw_set_color(c_red);
        if (ui_rotation_clock / ui_rotation_clock_max &lt; 1/2) {
            draw_line_width((border + minimap_width + (padding * (i+1)) + (button_size * i)) * display_scale, 
                (SCREEN_HEIGHT - border - minimap_height) * display_scale, 
                (border + minimap_width + (padding * (i+1)) + (button_size * (i+1))) * display_scale, 
                (SCREEN_HEIGHT - border - minimap_height) * display_scale,
                button_border_width * display_scale);
            draw_line_width((border + minimap_width + (padding * (i+1)) + (button_size * i)) * display_scale, 
                (SCREEN_HEIGHT - border - minimap_height + button_size) * display_scale, 
                (border + minimap_width + (padding * (i+1)) + (button_size * (i+1))) * display_scale, 
                (SCREEN_HEIGHT - border - minimap_height + button_size) * display_scale,
                button_border_width * display_scale);
        } else {
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height,
                border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height + button_size,
                button_border_width);
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height,
                border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height + button_size,
                button_border_width);
        }
    }
    
    if (i == button_required) {
        draw_set_color(c_yellow);
        if (ui_rotation_clock / ui_rotation_clock_max &lt; 1/2) {
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height,
                border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height + button_size,
                button_border_width);
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height,
                border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height + button_size,
                button_border_width);
        } else {
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height, 
                border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height,
                button_border_width);
            draw_line_width(border + minimap_width + (padding * (i+1)) + (button_size * i), 
                SCREEN_HEIGHT - border - minimap_height + button_size, 
                border + minimap_width + (padding * (i+1)) + (button_size * (i+1)), 
                SCREEN_HEIGHT - border - minimap_height + button_size,
                button_border_width);
        }
    }
    
    // draw button tooltips
    draw_set_alpha(button_tooltip_alpha);
    if (button_mouseover == i) {
        if (ds_map_exists(action_tooltip_strings, button_actions[| button_mouseover])
            &amp;&amp; action_tooltip_strings[? button_actions[| button_mouseover]] != "") {
            
            button_tooltip_height = string_height_ext(action_tooltip_strings[? button_actions[| button_mouseover]], 
                button_tooltip_text_height, 
                button_tooltip_width/button_tooltip_text_xscale)*button_tooltip_text_yscale + 2*button_tooltip_padding;
                
            draw_set_color(c_gray);
            draw_rectangle(draw_x + button_size/2 - button_tooltip_width/2,
                draw_y - button_tooltip_height - button_tooltip_distance_from_button,
                draw_x + button_size/2 + button_tooltip_width/2,
                draw_y - button_tooltip_distance_from_button,
                true);
            
            draw_set_color(c_black);
            draw_rectangle(draw_x + button_size/2 - button_tooltip_width/2,
                draw_y - button_tooltip_height - button_tooltip_distance_from_button,
                draw_x + button_size/2 + button_tooltip_width/2,
                draw_y - button_tooltip_distance_from_button,
                false);
                
            draw_set_font(HaloCE_gui_hud);
            draw_set_halign(fa_left);
            draw_set_color(c_gray);
            draw_text_ext_transformed(draw_x + button_size/2 - button_tooltip_width/2 + button_tooltip_padding,
                draw_y - button_tooltip_height + button_tooltip_padding - button_tooltip_distance_from_button,
                action_tooltip_strings[? button_actions[| button_mouseover]],
                button_tooltip_text_height,
                (button_tooltip_width - 2*button_tooltip_padding) * 1/button_tooltip_text_xscale,
                button_tooltip_text_xscale,
                button_tooltip_text_yscale,
                0);
        }
    }
    
    if (!sprite_exists(button_sprites[| i])) {
        show_debug_message("sprite does not exist for " + string(button_sprites[| i]) + " on " + string(i) + "th position of ui buttons");
    } else {
        draw_sprite(button_sprites[| i], 0, draw_x * display_scale, draw_y * display_scale);
    }

    draw_set_alpha(GUI_ALPHA);
    
    // draw key shortcut
    draw_set_font(Halo3_title);
    draw_set_halign(fa_center);
    draw_set_color(c_gray);
    draw_text((draw_x + button_size/2) * display_scale, (draw_y + button_size + text_padding) * display_scale, string(chr(button_keys[| i])));
    draw_x += button_size;
}

// draw current objectives if not in menu
var ctrlid = instance_find(oGameMenucontroller,0);
if (ctrlid == noone) {
    if (objective_string != "") {
        draw_set_color(c_gray);
        draw_set_font(HaloCE_gui_hud);
        draw_set_halign(fa_left);
        draw_text_ext(border, border, "Current Objective: #" + objective_string, -1, SCREEN_WIDTH);
    }
} else {
    draw_set_color(c_gray);
    draw_set_font(HaloCE_gui_hud);
    draw_set_halign(fa_left);
    draw_text_ext(border, border, "Credits: " + string(global.save_manager.credits) + "#Fleet Strength: " + string(ctrlid.fleetStrengthCurrent) + "/" + string(ctrlid.fleetStrengthMax), -1, SCREEN_WIDTH);
}

// if only 1 ship selected, draw unitinfo
if (instance_exists(global.selection_manager) &amp;&amp; ds_list_size(global.selection_manager.selection) == 1) {
    draw_set_color(c_gray);
    draw_set_font(HaloCE_gui_hud);
    draw_set_halign(fa_right);
    var unitid = global.selection_manager.selection[| 0];
    
    // Display selected unit if upgrading
    if (unitid.object_index == oRefitStation &amp;&amp; instance_exists(unitid.upgradeid)) {
        unitid = unitid.upgradeid;
    }
    
    var info_x = SCREEN_WIDTH - border;
    var info_y = border;
    if (unitid.race == "unsc") {
        draw_text_transformed(info_x, info_y, unitid.ship_name, 1, 1, 0);
        info_y += 28;
        if (ds_map_exists(shiptype_strings, unitid.object_index)) {
            draw_text_transformed(info_x, info_y, shiptype_strings[? unitid.object_index], infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.ares &gt; 0) {
            draw_text_transformed(info_x, info_y, "Ares Silos: " + string(unitid.ares), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.archerpod &gt; 0) {
            draw_text_transformed(info_x, info_y, "Archer Pods: " + string(unitid.archerpod), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.howler &gt; 0) {
            draw_text_transformed(info_x, info_y, "Howler Pods: " + string(unitid.howler), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.lance &gt; 0) {
            draw_text_transformed(info_x, info_y, "Lance Batteries: " + string(unitid.lance), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.pdt &gt; 0) {
            draw_text_transformed(info_x, info_y, "Point-defense Guns: " + string(unitid.pdt), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.helix &gt; 0) {
            draw_text_transformed(info_x, info_y, "Helix Anti-Air Artillery: " + string(unitid.helix), infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.broadsword_max &gt; 0) {
            draw_text_transformed(info_x, info_y, "Broadsword Fighters: " + string(unitid.broadsword) + "/" + string(unitid.broadsword_max) + "(" + string(broadsword_deploy_max) + ")", infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.longsword_max &gt; 0) {
            draw_text_transformed(info_x, info_y, "Longsword Interceptors: " + string(unitid.longsword) + "/" + string(unitid.longsword_max) + "(" + string(unitid.longsword_deploy_max) + ")", infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.pelican_max &gt; 0) {
            draw_text_transformed(info_x, info_y, "Pelican Transports: " + string(unitid.pelican) + "/" + string(unitid.pelican_max) + "(" + string(unitid.pelican_boarding_strength) + ")", infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.lmac &gt; 0) {
            draw_text_transformed(info_x, info_y, "Mark II Light MACs: " + string(unitid.lmac) + "(" + string(floor((unitid.lmac_cooldown_max-unitid.lmac_cooldown)/unitid.lmac_cooldown_max*100)) + "%)", infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }
        if (unitid.hmac &gt; 0) {
            draw_text_transformed(info_x, info_y, "Mark IV Heavy MACs: " + string(unitid.hmac) + "(" + string(floor((unitid.hmac_cooldown_max-unitid.hmac_cooldown)/unitid.hmac_cooldown_max*100)) + "%)", infotext_xscale, infotext_yscale, 0);
            info_y += infotext_padding;
        }

        
        draw_text_transformed(info_x, info_y, string(unitid.ship_exp)+" XP", infotext_xscale, infotext_yscale, 0);
        info_y += infotext_padding;
        
        var module_capacity = ds_list_create();
        module_capacity = getShipModuleSlots(unitid, module_capacity);
        draw_text_transformed(info_x, info_y, "Module Capacity: " + string(module_capacity[| 0]) + "/" + string(module_capacity[| 1]), infotext_xscale, infotext_yscale, 0);
        ds_list_destroy(module_capacity);
        info_y += infotext_padding;
        
        // Draw module icons
        info_x -= infotext_module_icon_size;
        var modules = unitid.ship_modules;
        var checkbit = 1;
        while (modules != 0) {
            if (modules &amp; checkbit) {
                modules -= checkbit;
                var module_icon = -1;
                switch (checkbit) {
                    case MODULE_MAC:
                        module_icon = sPrimaryFire;
                        break;
                    case MODULE_HANGAR:
                        module_icon = sHangar;
                        break;
                }
                if (sprite_exists(module_icon)) {
                    draw_sprite_ext(module_icon, 0, info_x, info_y, infotext_module_icon_size_ratio, infotext_module_icon_size_ratio, 0, c_white, GUI_ALPHA);
                    info_x -= infotext_module_icon_size + infotext_module_icon_padding;
                }
            }
            checkbit *= 2;
        }
    }
}

// draw overlay textbox
if (text_string != "") {
    draw_set_alpha(1);
    draw_set_color(c_gray);
    draw_rectangle(SCREEN_WIDTH/2 - textbox_width/2, 
        SCREEN_HEIGHT/2 - textbox_height/2,
        SCREEN_WIDTH/2 + textbox_width/2, 
        SCREEN_HEIGHT/2 + textbox_height/2,
        true);

    draw_set_alpha(textbox_alpha);        
    draw_set_color(c_black);
    draw_rectangle(SCREEN_WIDTH/2 - textbox_width/2, 
        SCREEN_HEIGHT/2 - textbox_height/2,
        SCREEN_WIDTH/2 + textbox_width/2, 
        SCREEN_HEIGHT/2 + textbox_height/2,
        false);
        
    var text_x = SCREEN_WIDTH/2 - textbox_width/2 + textbox_padding;
    var text_y = SCREEN_HEIGHT/2 - textbox_height/2 + textbox_padding;
    draw_set_font(HaloCE_gui_hud);
    draw_set_halign(fa_left);
    var display_string = string_copy(text_string, 1, floor(text_show_count)); // 1-indexed instead of 0-indexed
    draw_set_color(c_white);
    draw_set_alpha(textbox_text_alpha);
    draw_text_ext(text_x, text_y, display_string, text_sep, textbox_width - 2 * textbox_padding);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save(SCREEN_NAME_BASE + string(screennum) + SCREEN_EXT);
screennum++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(FarthestOutpost);
global.sfx = !global.sfx;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.debug = !global.debug;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
