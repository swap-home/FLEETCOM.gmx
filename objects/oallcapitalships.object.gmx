<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oselectableships</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

primary_damage = 1; //multiplier for damage
primary_rate = 1; //divisor for cooldown
primary_speed = 1; //multiplier for projectile movespeed
primary_range = 1; //multiplier for attack range

secondary_damage = 1;
secondary_rate = 1;
secondary_speed = 1;
secondary_range = 1;

tertiary_damage = 1;
tertiary_rate = 1;
tertiary_speed = 1;
tertiary_range = 1;

singleship_launch_rate = 1; //divisor for cooldown
singleship_launch_range = 1; //multiplier for detection range
//inherited by singleships
singleship_damage = 1;
singleship_rate = 1;
singleship_speed = 1;
singleship_range = 1;

sight_range = 1500;
strategy = "closest";
findtarget_delay = 30;

move_x = x;
move_y = y;
turning = false;

scramble_fighters = true;
fighter_targetid = id;
fighter_target_x = 0;
fighter_target_y = 0;

scramble_transports = false;
transport_targetid = noone;
transport_target_x = 0;
transport_target_y = 0;

fire_primary = false;
fire_secondary = true;
fire_pointdef = true;


//instance_create(x,y,oshockring);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var selfid;
selfid = id;
var selfside;
selfside = side;
var metric_value, metric_target_id;
metric_target_id = noone;

//metric to evaluate units with
metric_value = 9999;

//select capital ship's target
// do not override targets assigned by player
if (!instance_exists(assignedTargetid)) 
{
    assignedTargetid = noone;
    with (oallcapitalships)
    {
        //ignore units outside sight range or on the same team
        if (distance_to_object(selfid) &gt; sight_range || side == selfside)
        {
            continue;
        }
        
        if (strategy == "closest")
        {
            if (distance_to_object(selfid) &lt; metric_value)
            {
                metric_value = distance_to_object(selfid);
                metric_target_id = id;
            }
        }
        else if (strategy == "lowest")
        {
            if (hull+shield &lt; metric_value)
            {
                metric_value = hull+shield;
                metric_target_id = id;
            } 
        }
        //else if (strategy = targetclustered)
    }
    
    targetid = metric_target_id;
}

//select fighter target if AI
if (ai) {
    if (instance_exists(targetid)) {
        // Intercept singleships near enemy ship
        commandFighters(id, targetid.x, targetid.y, noone);
    } else {
        // Escort self if no targets
        commandFighters(id, 0, 0, id);
    }
}

alarm[0] = findtarget_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var dist_tolerance = maxspeed;
var angle_tolerance = 0.5;
var turn_heuristic = 2; //give this many times the amount of time to turn

if (abs(move_x - x) &lt;= dist_tolerance &amp;&amp; abs(move_y - y) &lt;= dist_tolerance)
{
    x = move_x;
    y = move_y;
    movespeed = 0;
}
else
{
    var distance = point_distance(x, y, move_x, move_y) * turn_heuristic;
    var angle = point_direction(x, y, move_x, move_y);
    
    var estimated_time = angle / maxturnrate;
    if (estimated_time == 0) {exit;}
    
    if (!withinDegrees(direction, angle, angle_tolerance))
    {
        if (!turning)
        {
            turnTowards(angle);
        }
        movespeed = min(distance / estimated_time, maxspeed);
    }
    else
    {
        movespeed = maxspeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oallcapitalships">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var degree = point_direction(x, y, other.x, other.y);
x -= lengthdir_x(0.10, degree);
y -= lengthdir_y(0.10, degree);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//redraw the object's sprite
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha); 

var oldAlpha = draw_get_alpha();
draw_set_alpha(GUI_ALPHA);

//draw a health bar
draw_bar(x-sprite_width/2,y-(sprite_height/2)-6,sprite_width,3,hull,hull_max,c_red,c_green);

//draw a shield bar
if (shield_max &gt; 0)
{draw_shield_bar(x-sprite_width/2,y-(sprite_height/2)-12,sprite_width,5,shield,shield_max);}

draw_set_alpha(oldAlpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
